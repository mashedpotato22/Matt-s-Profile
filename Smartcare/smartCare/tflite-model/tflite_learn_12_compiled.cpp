/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 01.12.2023 10:52:27

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 11728;
#else
constexpr int kTensorArenaSize = 10704;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1287 } };
const ALIGN(16) float tensor_data1[8] = { -0.51220095157623291, -0.64739435911178589, -0.78215157985687256, -0.61293375492095947, -0.73113137483596802, -0.49271014332771301, -0.51248401403427124, -0.58186334371566772, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const ALIGN(16) float tensor_data2[16] = { -0.28402414917945862, -0.28610098361968994, -0.37403911352157593, -0.0060161366127431393, -0.10200299322605133, -0.20184992253780365, -0.48034816980361938, -0.31639558076858521, -0.30680179595947266, -0.65173107385635376, 0.48186963796615601, -0.22653962671756744, -0.094003275036811829, -0.33295166492462158, -0.10430888831615448, -0.040275823324918747, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 99, 13, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data6[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const ALIGN(16) float tensor_data7[8*1*3*13] = { 
  /* [0][0][][] */ -0.54422301054000854,0.0063861594535410404,0.00055128068197518587,-0.35747206211090088,0.12527139484882355,0.22754144668579102,-0.02756749652326107,-0.04170328751206398,0.12587994337081909,-0.22769969701766968,0.29686486721038818,-0.16190287470817566,0.15422604978084564, -0.34717819094657898,-0.13732880353927612,0.13139870762825012,-0.22650766372680664,-0.26585352420806885,0.34765183925628662,-0.030861547216773033,0.27942115068435669,-0.30370041728019714,0.35482883453369141,-0.3273489773273468,0.39802539348602295,-0.084714546799659729, 0.49117305874824524,-0.29306873679161072,0.14077050983905792,-0.26575031876564026,-0.11819629371166229,-0.20199792087078094,0.12305431067943573,-0.20570124685764313,0.1421266496181488,-0.14883683621883392,0.13225485384464264,-0.10107789188623428,-0.0092650176957249641, 
  /* [1][0][][] */ -0.3485698401927948,-0.2582489550113678,-0.033025152981281281,-0.061383791267871857,-0.23252718150615692,-0.1132088303565979,-0.35690763592720032,0.15512709319591522,-0.06525595486164093,0.026117546483874321,-6.3404557295143604e-05,-0.056373845785856247,-0.0060006855055689812, 0.17071028053760529,1.062339186668396,0.15640838444232941,0.21910344064235687,0.045889910310506821,0.23882542550563812,0.080706968903541565,-0.24338604509830475,0.20456446707248688,0.0040720128454267979,-0.14981086552143097,-0.0130818085744977,-0.25394144654273987, -0.2100311666727066,-0.25528901815414429,0.096529565751552582,-0.072561144828796387,-0.20986199378967285,-0.069224096834659576,-0.2499595433473587,0.16754430532455444,0.0084051340818405151,0.14723867177963257,0.041421957314014435,0.056106649339199066,0.12316212058067322, 
  /* [2][0][][] */ 0.22955308854579926,0.46524089574813843,-0.54320722818374634,-0.16147004067897797,-0.25175589323043823,-0.13188405334949493,0.076191708445549011,-0.0082939183339476585,0.32764330506324768,-0.22482840716838837,0.15175902843475342,-0.2143084853887558,0.013525827787816525, 0.090684108436107635,0.16320934891700745,0.24775663018226624,-0.23497685790061951,-0.11720876395702362,0.007656455971300602,-0.11518057435750961,0.1742836982011795,-0.020402338355779648,-0.093067564070224762,0.064183689653873444,-0.11616544425487518,0.015650207176804543, -0.059157412499189377,0.22352197766304016,0.010991476476192474,-0.0072297640144824982,0.043133322149515152,0.0011444006813690066,0.083534762263298035,-0.25679740309715271,0.07537291944026947,-0.33201521635055542,0.26303067803382874,-0.18258850276470184,0.2303086519241333, 
  /* [3][0][][] */ -0.25200214982032776,-0.3913346529006958,-0.15931650996208191,-0.39037114381790161,-0.22629404067993164,-0.19147349894046783,0.067126251757144928,-0.2658313512802124,-0.080307096242904663,-0.087296195328235626,-0.26157897710800171,-0.14724873006343842,-0.1234176978468895, 0.2954145073890686,0.53815984725952148,0.12369276583194733,0.52563935518264771,0.37337994575500488,0.25120559334754944,0.043515577912330627,0.52069520950317383,0.14698025584220886,0.22889494895935059,0.20506575703620911,0.26621529459953308,0.30814003944396973, -0.060439713299274445,-0.16358445584774017,-0.007364470511674881,-0.22747397422790527,-0.06495928019285202,-0.04145706444978714,-0.078462369740009308,-0.28180158138275146,-0.089019559323787689,-0.12231703847646713,-0.086851872503757477,0.04676157608628273,-0.071623452007770538, 
  /* [4][0][][] */ 0.20541886985301971,0.25342369079589844,-0.013397357426583767,0.17416369915008545,0.049059916287660599,0.32895931601524353,0.19330583512783051,-0.021428899839520454,-0.069519385695457458,0.055935606360435486,-0.16627058386802673,0.030425358563661575,0.011649583466351032, -0.14750830829143524,-0.43517619371414185,-0.22139525413513184,-0.31588950753211975,-0.31021592020988464,-0.070189930498600006,-0.047085389494895935,0.053468383848667145,-0.11955943703651428,0.094129003584384918,-0.11779150366783142,-0.12004073709249496,0.22668369114398956, 0.16929370164871216,0.25573864579200745,0.1146426796913147,0.21768774092197418,-0.013616319745779037,0.21328037977218628,0.17287802696228027,-0.0067472192458808422,-0.13343788683414459,-0.041509475558996201,-0.18541145324707031,-0.26432526111602783,-0.026021635159850121, 
  /* [5][0][][] */ -0.10369504988193512,0.025527723133563995,-0.25169080495834351,0.41240116953849792,0.12504240870475769,-0.037729311734437943,0.19440099596977234,-0.29642370343208313,0.14753060042858124,-0.045088920742273331,0.042979057878255844,0.34747880697250366,-0.050591178238391876, -0.28606685996055603,-0.3676239550113678,0.48165085911750793,-0.29633757472038269,0.22213123738765717,0.18765212595462799,-0.13921181857585907,0.27807801961898804,-0.35963824391365051,0.23792296648025513,0.065891437232494354,0.076742194592952728,-0.085416749119758606, 0.028049996122717857,0.41231042146682739,-0.40399107336997986,0.35678702592849731,-0.056191954761743546,0.17983748018741608,0.38760712742805481,-0.26632332801818848,0.31820181012153625,-0.069383740425109863,0.06926562637090683,0.22180336713790894,-0.0094532500952482224, 
  /* [6][0][][] */ 0.014030644670128822,0.073781572282314301,0.046849340200424194,0.2896391749382019,-0.27025473117828369,-0.030356325209140778,-0.43532228469848633,0.32114285230636597,-0.31326451897621155,0.11864230036735535,-0.44206950068473816,0.17864184081554413,-0.13171170651912689, -0.26431551575660706,-0.095206327736377716,-0.37103366851806641,-0.28898116946220398,0.34268078207969666,0.041168779134750366,0.11148277670145035,-0.25662752985954285,0.30976969003677368,-0.40235671401023865,0.67546200752258301,-0.45786964893341064,0.40861132740974426, 0.23461361229419708,-0.23800845444202423,0.019871190190315247,0.015177237801253796,-0.19366875290870667,-0.1597171276807785,0.19702966511249542,-0.26677438616752625,-0.21980659663677216,0.18141183257102966,-0.32620745897293091,0.41152724623680115,-0.39309874176979065, 
  /* [7][0][][] */ 0.62247753143310547,0.18019692599773407,-0.18725809454917908,-0.1678217351436615,0.18569798767566681,0.27169939875602722,-0.3844432532787323,0.20590555667877197,-0.14333732426166534,0.021904462948441505,-0.1270020604133606,0.2937125563621521,-0.015060823410749435, -0.15312658250331879,-0.45985004305839539,0.17616485059261322,-0.002979637123644352,0.27061894536018372,-0.2114536315202713,0.39560955762863159,-0.17842273414134979,0.32575592398643494,0.11165422946214676,-0.25924211740493774,0.1488119512796402,-0.23424454033374786, -0.27356892824172974,0.1688578724861145,0.21793024241924286,0.0964936763048172,-0.44775095582008362,0.16863274574279785,-0.017138153314590454,0.0066648731008172035,-0.3368072509765625,-0.36504632234573364,0.39892482757568359,-0.2694624662399292,0.092906482517719269, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,1,3,13 } };
const ALIGN(16) float tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 0.18889883160591125,-0.024975260719656944,0.036308526992797852,0.10538794100284576,-0.1583879142999649,-0.11687546223402023,0.10383699089288712,0.48752963542938232, 0.04290921613574028,-0.051640938967466354,-0.069289505481719971,-0.27809679508209229,-0.30671766400337219,-0.13485139608383179,0.3861115574836731,-0.094501130282878876, 0.14845238626003265,-0.077529512345790863,-0.045168213546276093,-0.019499232992529869,-0.27658164501190186,-0.086032412946224213,0.31611347198486328,0.14769896864891052, 
  /* [1][0][][] */ -0.48080378770828247,-0.078789196908473969,0.020723458379507065,-0.25985404849052429,-0.1975855827331543,-0.30616810917854309,-0.14718125760555267,0.0087459944188594818, -0.28276935219764709,-0.28584527969360352,0.10715527087450027,-0.46326476335525513,-0.06269875168800354,-0.0021546741481870413,0.0062883105129003525,-0.013941854238510132, 0.75875455141067505,-0.26462817192077637,0.1082809641957283,-0.70697295665740967,-0.20207370817661285,0.12132479250431061,0.27020213007926941,-0.26607924699783325, 
  /* [2][0][][] */ -0.10735543817281723,-0.043712228536605835,-0.07306969165802002,0.15401734411716461,-0.1094164177775383,-0.11049069464206696,0.060687541961669922,0.31203669309616089, 0.31909549236297607,0.023747948929667473,0.032592490315437317,0.11669545620679855,-0.18525667488574982,-0.18642543256282806,0.30588477849960327,0.45885911583900452, -0.1414509117603302,-0.13493601977825165,-0.030841492116451263,0.011104227043688297,-0.18487890064716339,-0.017935032024979591,0.41868981719017029,-0.0062145828269422054, 
  /* [3][0][][] */ 0.25524941086769104,-0.57935941219329834,0.49598753452301025,-0.18368770182132721,0.230449378490448,-0.21288409829139709,-0.31168201565742493,-0.021230814978480339, 0.19048158824443817,-0.63297504186630249,-0.087189361453056335,-0.3482813835144043,0.10439738631248474,-0.075620457530021667,-0.37893012166023254,-0.066404402256011963, 0.08503451943397522,-0.26672747731208801,0.029842568561434746,-0.18664349615573883,0.17469814419746399,0.21850422024726868,0.17971457540988922,-0.096461310982704163, 
  /* [4][0][][] */ -0.017005991190671921,-0.062829501926898956,-0.35935765504837036,-0.44037765264511108,0.080795109272003174,-0.22758209705352783,-0.27247786521911621,-0.10729409009218216, -0.063680194318294525,0.15151920914649963,-0.086752749979496002,-0.23124668002128601,-0.015259202569723129,0.27807056903839111,-0.27774322032928467,-0.34180334210395813, 0.083049960434436798,0.031099976971745491,0.34294113516807556,-0.18739160895347595,-0.40488922595977783,0.44253259897232056,-0.21421012282371521,-0.31471225619316101, 
  /* [5][0][][] */ -0.16000305116176605,0.49015042185783386,0.056977637112140656,0.0059851361438632011,0.2941327691078186,-0.26405900716781616,-0.38477048277854919,-0.048337608575820923, -0.16686224937438965,0.075035281479358673,-0.037110462784767151,-0.11098644137382507,0.25708189606666565,0.35478883981704712,-0.34723833203315735,-0.30704241991043091, -0.16745734214782715,0.47182238101959229,0.041199430823326111,0.081154219806194305,0.27991604804992676,0.021305575966835022,-0.3460928201675415,-0.21212136745452881, 
  /* [6][0][][] */ 0.36630222201347351,0.062030326575040817,-0.052646342664957047,0.070290334522724152,-0.30180823802947998,-0.096530608832836151,0.08776402473449707,0.046515487134456635, -0.064780652523040771,-0.14672398567199707,-0.17527088522911072,-0.23491199314594269,-0.39344057440757751,-0.079038530588150024,0.49708694219589233,0.50937795639038086, -0.0320538729429245,-0.45993861556053162,-0.22808267176151276,0.24257951974868774,-0.33521115779876709,0.020298467949032784,0.0018586873775348067,-0.22401006519794464, 
  /* [7][0][][] */ -0.042237970978021622,0.29242110252380371,-0.0038032843731343746,-0.36041036248207092,-0.26331451535224915,0.27707305550575256,-0.29707649350166321,-0.29771256446838379, -0.099016360938549042,0.43652287125587463,0.3205292820930481,-0.021733339875936508,0.29710999131202698,0.10168173164129257,-0.2844163179397583,-0.38446170091629028, -0.20661550760269165,-0.03053666464984417,-0.007927989587187767,-0.22656385600566864,0.21202759444713593,0.3376319408416748,-0.37935423851013184,-0.36775019764900208, 
  /* [8][0][][] */ 0.069332540035247803,-0.091920770704746246,0.046543419361114502,0.073472604155540466,-0.20241731405258179,-0.14903955161571503,0.36637166142463684,0.55401319265365601, 0.004908418282866478,-0.15216973423957825,-0.044135849922895432,0.089265152812004089,-0.018174357712268829,-0.069490648806095123,-0.012190055102109909,0.52905499935150146, -0.047370295971632004,-0.27481478452682495,-0.011722863651812077,-0.1248820573091507,-0.067568734288215637,-0.10282593965530396,0.054910875856876373,-0.5237201452255249, 
  /* [9][0][][] */ -0.14712062478065491,-0.70410138368606567,0.28376737236976624,0.096335209906101227,0.063845545053482056,0.02658754400908947,0.18901565670967102,0.1104336678981781, -0.23664192855358124,-0.60386598110198975,0.10867322236299515,0.010258753784000874,-0.058402620255947113,0.16254860162734985,0.070064671337604523,0.28163734078407288, -0.27943119406700134,-0.6308290958404541,-0.11988432705402374,0.46878689527511597,0.093909256160259247,0.12107441574335098,-0.098777614533901215,0.25561794638633728, 
  /* [10][0][][] */ -0.18394772708415985,-0.0055937143042683601,-0.10622849315404892,0.20019356906414032,-0.19461219012737274,-0.2884315550327301,-0.42459022998809814,0.059413865208625793, -0.17484739422798157,-0.14786037802696228,-0.099985979497432709,0.43713641166687012,-0.15047819912433624,-0.27555394172668457,-0.5284048318862915,-0.051385018974542618, -0.1308133602142334,0.092842899262905121,-0.14822183549404144,0.21412695944309235,-0.21346315741539001,-0.20980559289455414,-0.47211802005767822,0.16100156307220459, 
  /* [11][0][][] */ -0.11426159739494324,0.55729508399963379,-0.05122089758515358,0.71844387054443359,0.12257348746061325,-0.020682716742157936,0.021135617047548294,-0.082813382148742676, -0.11061027646064758,-0.054252609610557556,-0.057493463158607483,0.42736795544624329,0.3992704451084137,0.0017791675636544824,0.047989971935749054,0.13265359401702881, -0.052702173590660095,0.29780939221382141,-0.086442828178405762,0.55920332670211792,0.0079219723120331764,0.0081655960530042648,-0.020289845764636993,-0.12460209429264069, 
  /* [12][0][][] */ -0.20760050415992737,-0.031421665102243423,-0.077977046370506287,-0.33514845371246338,-0.42427864670753479,-0.041317827999591827,0.59126096963882446,0.17600418627262115, 0.18956135213375092,-0.04930509626865387,-0.06263238936662674,-0.74862784147262573,-0.21087785065174103,-0.0009714961051940918,-0.37622493505477905,0.05588170513510704, 0.27861064672470093,0.025464486330747604,0.11014025658369064,-0.44955965876579285,-0.31884092092514038,0.0024117843713611364,-0.31904786825180054,0.29808160662651062, 
  /* [13][0][][] */ 0.13647742569446564,0.044867616146802902,-0.073581650853157043,-0.41503331065177917,-0.055607017129659653,0.55974984169006348,-0.30430644750595093,-0.25372695922851562, 0.057967089116573334,0.088946238160133362,-0.061131801456212997,-0.20462727546691895,-0.07490018755197525,-0.29889103770256042,-0.46834692358970642,-0.30873572826385498, -0.12417958676815033,0.080918818712234497,0.47923392057418823,-0.28263944387435913,0.088778503239154816,0.01464508194476366,-0.45629414916038513,-0.14302529394626617, 
  /* [14][0][][] */ 0.20060782134532928,0.075761750340461731,0.23542243242263794,-0.25958812236785889,-0.023192182183265686,0.29786971211433411,-0.26838657259941101,-0.33550980687141418, 0.014692771248519421,0.11157277971506119,0.31995776295661926,-0.23069837689399719,0.0053412141278386116,0.33654537796974182,-0.31472107768058777,-0.48630180954933167, 0.24353820085525513,-0.2077118307352066,-0.078020483255386353,-0.066779732704162598,0.18859387934207916,-0.46397387981414795,-0.47463729977607727,-0.4216105043888092, 
  /* [15][0][][] */ 0.5013432502746582,-0.17748433351516724,-0.21650883555412292,-0.027315223589539528,0.031912531703710556,-0.013756239786744118,-0.1857859343290329,0.1129317507147789, -0.28974509239196777,-0.32424002885818481,-0.034211136400699615,-0.22794893383979797,0.15059563517570496,-0.41015207767486572,-0.25576916337013245,-0.068618975579738617, -0.43863162398338318,-0.18296331167221069,0.52995067834854126,-0.2954159677028656,-0.13352265954017639,-0.13362552225589752,-0.050903823226690292,-0.047415446490049362, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const ALIGN(8) float tensor_data9[3] = { -0.21489320695400238, -0.11139946430921555, 0.28687486052513123, };
const TfArray<1, int> tensor_dimension9 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data10[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const ALIGN(16) float tensor_data11[3*400] = { 
  -0.12416299432516098, -0.018032820895314217, -0.040509488433599472, -0.044258303940296173, 0.087001778185367584, 0.12790524959564209, -0.075113244354724884, 0.073647007346153259, -0.02427329309284687, 0.087122097611427307, 0.14835032820701599, 0.052493132650852203, -7.3741481173783541e-05, 0.045956779271364212, 0.15290443599224091, 0.23244191706180573, -0.22146080434322357, -0.090100623667240143, -0.23179568350315094, 0.17097631096839905, 0.20630061626434326, 0.19873173534870148, -0.18988920748233795, 0.11802879720926285, -0.30581960082054138, 0.23740823566913605, 0.16624678671360016, 0.10867130011320114, -0.27962759137153625, 0.050086397677659988, 0.18258951604366302, -0.14488685131072998, -0.13636088371276855, 0.12847302854061127, -0.22305211424827576, 0.0703311488032341, 0.20616422593593597, 0.086035169661045074, -0.1662931889295578, 0.1448168158531189, -0.20605689287185669, 0.061125483363866806, -0.067173965275287628, 0.12483803927898407, -0.054029863327741623, 0.15517409145832062, 0.16501894593238831, -0.17778840661048889, -0.1821351945400238, -0.049037102609872818, -0.20740169286727905, 0.06854972243309021, 0.11308338493108749, 0.028986468911170959, -0.14413760602474213, 0.19678571820259094, -0.054175768047571182, 0.081625223159790039, 0.016129594296216965, 0.10750244557857513, -0.14388993382453918, 0.1371215283870697, 0.11750636994838715, 0.094792790710926056, -0.048280403017997742, -0.069351457059383392, -0.13469533622264862, 0.22890225052833557, 0.1624780148267746, 0.14163894951343536, -0.5264657735824585, 0.11461286246776581, -0.18316765129566193, 0.12731730937957764, -0.14756208658218384, 0.19366049766540527, -0.19832988083362579, 0.30555394291877747, 0.15845713019371033, 0.2146259993314743, -0.23004189133644104, -0.22521242499351501, -0.13450914621353149, 0.10330957174301147, 0.25389042496681213, 0.12226707488298416, -0.1411309689283371, 0.20811761915683746, -0.38226670026779175, -0.04444364458322525, -0.15214821696281433, 0.17777106165885925, -0.32764977216720581, 0.39930608868598938, 0.31186902523040771, 0.18442830443382263, -0.24127680063247681, -0.34482863545417786, -0.21678116917610168, 0.28782272338867188, 0.17481487989425659, 0.21035343408584595, -0.29983487725257874, 0.24006390571594238, 0.12436442077159882, -0.11200378090143204, -0.12652218341827393, 0.092927344143390656, -0.10338358581066132, 0.39966177940368652, 0.10311358422040939, 0.073701001703739166, -0.21718859672546387, -0.053226206451654434, -0.035198833793401718, -0.033130384981632233, 0.34110206365585327, 0.19705857336521149, -0.091157056391239166, 0.18665409088134766, -0.17639529705047607, 0.22097374498844147, -0.039954304695129395, -0.050973229110240936, -0.44388538599014282, 0.02139931358397007, 0.072688035666942596, -0.28043290972709656, -0.089963391423225403, -0.11027798056602478, -0.29943379759788513, 0.036381043493747711, 0.29635399580001831, 0.078346222639083862, -0.19519633054733276, 0.039118565618991852, -0.11488878726959229, -0.15223057568073273, -0.063488215208053589, 0.12476413697004318, -0.13561378419399261, 0.20900827646255493, 0.02277514711022377, -0.38810235261917114, -0.11758092790842056, -0.070507124066352844, -0.089365728199481964, 0.20079256594181061, 0.16886699199676514, 0.13066495954990387, -0.14578364789485931, 0.076448544859886169, -0.29330417513847351, -0.034213490784168243, -0.075940072536468506, 0.017352258786559105, -0.29271438717842102, 0.34395232796669006, 0.019724063575267792, 0.11598388850688934, -0.13564600050449371, 0.082098938524723053, -0.084842219948768616, 0.12580756843090057, 0.0084752533584833145, 0.2271820604801178, -0.090942367911338806, 0.18344965577125549, -0.001586238737218082, -0.31455692648887634, -0.16971878707408905, 0.14228551089763641, -0.14265738427639008, 0.036205559968948364, 0.15355341136455536, 0.05548911914229393, -0.18565280735492706, -0.25800967216491699, -0.2183423787355423, 0.083263233304023743, 0.21879516541957855, 0.13447903096675873, -0.19217479228973389, 0.13475909829139709, -0.31907135248184204, 0.027132093906402588, -0.15114910900592804, 0.12089093774557114, -0.25116026401519775, 0.1240275502204895, 0.29194378852844238, 0.049138382077217102, -0.053429961204528809, -0.19821235537528992, -0.33220621943473816, -0.091754183173179626, 0.2984769344329834, 0.11278335750102997, -0.11822482943534851, 0.29890352487564087, -0.1687067449092865, 0.086932145059108734, -0.059553615748882294, 0.08320772647857666, -0.13142883777618408, 0.22731983661651611, 0.15507709980010986, -0.14792630076408386, -0.21822120249271393, -0.10128019005060196, -0.093794167041778564, -0.11184363067150116, 0.18818075954914093, 0.095925711095333099, -0.30936050415039062, 0.032741747796535492, 0.06215011328458786, -0.033897198736667633, -0.08152308315038681, 0.11434002220630646, -0.15175668895244598, 0.23722733557224274, -0.0017890161834657192, -0.12115254253149033, -0.2161436527967453, -0.091793075203895569, -0.14955852925777435, 0.049770548939704895, 0.1712537556886673, 0.048068426549434662, -0.21540637314319611, -0.0032717795111238956, -0.0074569247663021088, 0.062854066491127014, 0.040027186274528503, 0.15533797442913055, -0.26822328567504883, 0.10228522121906281, 0.058847419917583466, -0.24428264796733856, -0.19864282011985779, -0.1550576239824295, -0.2485811710357666, -0.042258527129888535, 0.21951994299888611, -0.032776422798633575, -0.48649981617927551, 0.098486475646495819, -0.25078380107879639, -0.12036722153425217, -0.0015357512747868896, 0.098279185593128204, -0.11644883453845978, 0.51607829332351685, 0.026086976751685143, 0.0524759441614151, -0.16095457971096039, -0.19279903173446655, -0.029058774933218956, 0.14870518445968628, 0.13622327148914337, 0.22459423542022705, -0.23375271260738373, 0.24661064147949219, -0.21247425675392151, -0.15141978859901428, 0.038625936955213547, 0.14338219165802002, -0.10144010931253433, 0.085755221545696259, 0.047664567828178406, 0.10015733540058136, -0.34638431668281555, -0.26018437743186951, -0.19163960218429565, -0.010713653638958931, 0.1063586100935936, 0.22639688849449158, -0.50341123342514038, 0.077137179672718048, -0.17897307872772217, 0.034211955964565277, 0.0071720029227435589, 0.071236543357372284, 0.11878165602684021, 0.15369439125061035, 0.051045339554548264, 0.054487705230712891, -0.19542096555233002, -0.028351470828056335, -0.24398095905780792, -0.0087268734350800514, -0.01774943619966507, 0.0687856525182724, -0.14573487639427185, 0.1652810275554657, -0.080029688775539398, -0.25054612755775452, 0.063073381781578064, 0.074659630656242371, -0.13269396126270294, 0.34711495041847229, 0.050680428743362427, -0.0046777930110692978, -0.2468329519033432, -0.28264489769935608, -0.21715943515300751, -0.11583205312490463, 0.018250085413455963, 0.2017488032579422, -0.38382717967033386, 0.25771299004554749, -0.0039784945547580719, 0.12545008957386017, -0.0028285025618970394, 0.037568699568510056, -0.18858355283737183, 0.24240563809871674, 0.10811127722263336, -0.2010759711265564, -0.24125169217586517, -0.22333943843841553, -0.13788719475269318, -0.076450154185295105, 0.32458716630935669, 0.12069842964410782, -0.42071303725242615, 0.22989678382873535, -0.15444827079772949, -0.23057837784290314, 0.1001666858792305, 0.0056251026690006256, -0.29575327038764954, 0.2675987184047699, 0.054010629653930664, -0.24590267241001129, -0.16171656548976898, -0.19438447058200836, -0.23260498046875, -0.099401779472827911, 0.08925309032201767, 0.011844057589769363, -0.43694856762886047, 0.1083996370434761, -0.17061395943164825, -0.058744471520185471, -0.043943688273429871, 0.049245819449424744, -0.036764323711395264, 0.30561256408691406, 0.15654195845127106, -0.17852991819381714, -0.18298161029815674, 0.076207511126995087, 0.071809977293014526, 0.097888633608818054, 0.170299232006073, 0.1611519455909729, -0.29962131381034851, 0.15518540143966675, -0.13354574143886566, -0.29453784227371216, 0.02659078873693943, 0.071783415973186493, -0.22114865481853485, 0.23524083197116852, 0.047975905239582062, 0.047322612255811691, -0.12862573564052582, -0.040976647287607193, -0.23510812222957611, -0.040076084434986115, 0.29959586262702942, 0.28081709146499634, -0.038496732711791992, 0.18461760878562927, -0.15252023935317993, -0.28810033202171326, -0.19477856159210205, 0.21386043727397919, -0.29273006319999695, 0.23999780416488647, 0.15046234428882599, 0.2602292001247406, -0.3332236111164093, -0.28985345363616943, -0.13077874481678009, 0.16942468285560608, -0.059116248041391373, -0.0031854317057877779, -0.10528665781021118, 0.030443742871284485, -0.15871913731098175, -0.069349512457847595, -0.01152864471077919, 0.15693391859531403, -0.13681946694850922, 0.079027421772480011, 0.0065693953074514866, 0.10121052712202072, 
  0.10248779505491257, 0.19370071589946747, 0.10087252408266068, 0.045278768986463547, -0.11764257401227951, -0.54956924915313721, 0.10035248100757599, -0.3951382040977478, -0.076302334666252136, -0.3070073127746582, -0.44413167238235474, -0.70154529809951782, 0.19821770489215851, 0.019876608625054359, 0.20111677050590515, 0.13652719557285309, 0.045119524002075195, 0.3387872576713562, 0.0564999058842659, 0.16321170330047607, 0.10348783433437347, -0.34676772356033325, 0.17813803255558014, -0.22007021307945251, -0.022377369925379753, -0.32516518235206604, -0.31077748537063599, -0.29199594259262085, 0.21431425213813782, 0.046220183372497559, 0.10140427947044373, 0.11830926686525345, 0.010252576321363449, 0.29662129282951355, -0.051761113107204437, 0.24350802600383759, 0.31195837259292603, -0.44452148675918579, -0.019345585256814957, -0.05558488517999649, -0.016032174229621887, -0.25194883346557617, -0.4831530749797821, -0.57259452342987061, 0.2352215051651001, -0.067794591188430786, 0.06714814156293869, 0.18195688724517822, 0.099899396300315857, 0.22205495834350586, 0.097659416496753693, -0.020684456452727318, 0.085204370319843292, -0.32586553692817688, 0.11262268573045731, -0.19757077097892761, 0.10908125340938568, -0.037362311035394669, -0.20200850069522858, -0.46797835826873779, 0.30167001485824585, 0.3430154025554657, -0.03495238721370697, 0.2425161749124527, 0.21616186201572418, 0.41389933228492737, 0.11954495310783386, 0.37256449460983276, -0.013769714161753654, -0.38619974255561829, 0.30805221199989319, -0.12523990869522095, 0.11560069024562836, 0.056576661765575409, -0.24053622782230377, -0.44172248244285583, 0.29268452525138855, 0.28226518630981445, -0.034998137503862381, 0.13788825273513794, 0.03732561320066452, 0.26320981979370117, 0.045079104602336884, 0.044837042689323425, -0.11346131563186646, -0.29051285982131958, 0.19460900127887726, -0.1419798731803894, 0.1105370968580246, -0.14029727876186371, -0.27267742156982422, -0.54885900020599365, 0.38622289896011353, 0.0051008961163461208, -0.012869439087808132, 0.3152833878993988, 0.044389165937900543, 0.18440011143684387, 0.14583529531955719, 0.16150486469268799, -0.025121072307229042, -0.18747977912425995, -0.070699214935302734, -0.12761110067367554, 0.074112653732299805, -0.21353551745414734, -0.33439344167709351, -0.36739808320999146, 0.12532714009284973, -0.072125039994716644, 0.05965312197804451, 0.30630111694335938, 0.12942372262477875, 0.38323104381561279, 0.12467967718839645, 0.30887454748153687, 0.0083787105977535248, -0.26619207859039307, 0.15784838795661926, -0.1071414053440094, 0.27370399236679077, -0.11651737987995148, -0.41642805933952332, -0.45349860191345215, -0.050276707857847214, 0.15212076902389526, 0.15134471654891968, 0.20062032341957092, 0.1166011169552803, 0.33126264810562134, 0.019932122901082039, 0.26795700192451477, 0.15392562747001648, -0.3788449764251709, -0.030072769150137901, -0.13280032575130463, -0.10497177392244339, -0.030967952683568001, -0.30704659223556519, -0.58575797080993652, 0.13942550122737885, 0.082200728356838226, 0.12835812568664551, 0.27454811334609985, 0.14390547573566437, 0.3405613899230957, 0.15281933546066284, 0.1801525354385376, 0.19860491156578064, -0.30055460333824158, 0.45246991515159607, -0.071644127368927002, 0.17598709464073181, -0.17480431497097015, -0.1116403341293335, -0.29100650548934937, 0.29531145095825195, -0.023477053269743919, 0.098058626055717468, 0.096244446933269501, 0.19068683683872223, 0.35837823152542114, 0.061756715178489685, 0.26643085479736328, 0.27465030550956726, -0.41110974550247192, 0.26042106747627258, -0.12202484905719757, 0.10703171044588089, -0.1768047958612442, -0.19346749782562256, -0.43020069599151611, 0.28020539879798889, 0.01242499053478241, 0.095454372465610504, 0.39012855291366577, 0.106948621571064, 0.22945672273635864, 0.14256514608860016, 0.25285443663597107, 0.097027771174907684, -0.33217719197273254, 0.14394226670265198, -0.10391037166118622, -0.022918278351426125, -0.19337166845798492, -0.42500248551368713, -0.47966766357421875, 0.26444610953330994, 0.22769938409328461, 0.18483270704746246, 0.24100863933563232, 0.10589782148599625, 0.1896526962518692, 0.092496253550052643, 0.079593382775783539, 0.022598467767238617, -0.1527043879032135, -0.016459830105304718, -0.013300924561917782, 0.094773508608341217, -0.23955561220645905, -0.15506155788898468, -0.33204329013824463, 0.27102816104888916, 0.15344645082950592, 0.091318577527999878, 0.27570450305938721, 0.08618684858083725, 0.27043300867080688, 0.10284695029258728, 0.17506706714630127, -0.027813801541924477, -0.27654457092285156, 0.20966924726963043, -0.13189484179019928, 0.039255369454622269, 0.096188060939311981, -0.25184276700019836, -0.42538875341415405, 0.06855657696723938, 0.10409659892320633, 0.1803717166185379, 0.33309036493301392, 0.028616808354854584, 0.30533769726753235, 0.13789588212966919, 0.36124852299690247, 0.18753761053085327, -0.16238297522068024, 0.080204710364341736, -0.17914554476737976, 0.13558757305145264, 0.0059953401796519756, -0.24385571479797363, -0.45127600431442261, 0.26513618230819702, 0.18443979322910309, 0.089233644306659698, 0.430277019739151, 0.2087189108133316, 0.44121170043945312, 0.056277599185705185, 0.07368883490562439, 0.18669198453426361, -0.17681577801704407, 0.089251823723316193, 0.012439421378076077, 0.11024415493011475, 0.02389143593609333, -0.11820807307958603, -0.47737306356430054, 0.34921261668205261, 0.10971332341432571, 0.11611705273389816, 0.064982250332832336, 0.17600667476654053, 0.098982363939285278, 0.11027181893587112, 0.19558563828468323, 0.10549677908420563, -0.37631428241729736, 0.34035113453865051, -0.10020445287227631, 0.036557439714670181, -0.082876496016979218, -0.37815773487091064, -0.40123531222343445, 0.21290360391139984, 0.13315954804420471, 0.077850565314292908, 0.43967315554618835, 0.15729005634784698, 0.27361413836479187, 0.060691319406032562, 0.35745477676391602, 0.040014658123254776, -0.55697005987167358, 0.17148858308792114, -0.15909385681152344, 0.10245320945978165, 0.1343991756439209, -0.42157411575317383, -0.63001906871795654, 0.11610513180494308, 0.29553338885307312, 0.081594362854957581, 0.39577019214630127, 0.04459439218044281, 0.25673609972000122, 0.078670665621757507, 0.048116892576217651, 0.095434553921222687, -0.38261502981185913, -0.082460545003414154, -0.081772699952125549, 0.075531244277954102, -0.077914126217365265, -0.35317182540893555, -0.70817947387695312, 0.2371666431427002, 0.12843203544616699, 0.055036716163158417, 0.1769106537103653, 0.13646975159645081, 0.44667813181877136, -0.036228805780410767, 0.25967743992805481, 0.14136452972888947, -0.22791025042533875, 0.18981122970581055, -0.109318807721138, 0.050376646220684052, -0.11835376918315887, -0.51104027032852173, -0.50149524211883545, 0.16635356843471527, 0.084774032235145569, 0.13189347088336945, 0.42315545678138733, 0.29102501273155212, 0.36585766077041626, 0.071218863129615784, 0.31298679113388062, 0.16486561298370361, -0.35552108287811279, 0.45607778429985046, -0.15807187557220459, 0.16923433542251587, 0.026145666837692261, -0.45270907878875732, -0.73233598470687866, 0.32913288474082947, 0.10180620849132538, 0.27819275856018066, 0.45511767268180847, 0.16666971147060394, 0.32451841235160828, 0.083129487931728363, 0.20792372524738312, 0.063989453017711639, -0.38329583406448364, 0.076006725430488586, -0.074643842875957489, -0.031780581921339035, 0.030347650870680809, -0.1285870224237442, -0.43407034873962402, 0.32999461889266968, 0.13603155314922333, 0.32431885600090027, 0.17159473896026611, 0.17112834751605988, 0.29853102564811707, 0.020527932792901993, 0.10394560545682907, 0.32774344086647034, -0.17531238496303558, 0.34538891911506653, -0.17891280353069305, -0.064369939267635345, -0.23720273375511169, -0.27265515923500061, -0.47968786954879761, 0.29243552684783936, 0.31314510107040405, -0.054189339280128479, 0.33252483606338501, 0.033563200384378433, 0.28096449375152588, 0.21498402953147888, 0.13964693248271942, 0.015166983008384705, -0.37951108813285828, -0.051728304475545883, -0.10759972780942917, 0.16700869798660278, -0.16375537216663361, -0.50584399700164795, -0.34816542267799377, 0.16932784020900726, 0.33972567319869995, 0.098888672888278961, 0.31400805711746216, 0.0086449095979332924, 0.23685064911842346, -0.071922451257705688, 0.14225791394710541, -0.036649655550718307, -0.43239939212799072, -0.1382850855588913, -0.34148493409156799, -0.14771854877471924, -0.18468618392944336, -0.30009305477142334, -0.64935135841369629, 0.12210690975189209, 0.29700219631195068, -0.012383095920085907, 0.13321922719478607, 
  0.063673369586467743, -0.064791157841682434, 0.18121880292892456, -0.12562212347984314, -0.2249310165643692, 0.11291125416755676, 0.050425425171852112, -0.039675746113061905, 0.070483773946762085, 0.15760572254657745, 0.24254657328128815, 0.08999265730381012, -0.12518483400344849, -0.044134069234132767, -0.21516388654708862, -0.24912554025650024, 0.19084067642688751, -0.18189729750156403, 0.15054593980312347, -0.13211117684841156, -0.25884145498275757, 0.12998466193675995, 0.23470132052898407, -0.088730990886688232, 0.1004742830991745, 0.0047783222980797291, 0.14729426801204681, 0.07371433824300766, 0.093220345675945282, -0.19567464292049408, -0.12727566063404083, -0.089810989797115326, 0.097978085279464722, -0.25887352228164673, 0.18237176537513733, -0.23641699552536011, -0.27031439542770386, 0.01025968324393034, 0.096597708761692047, 0.078132987022399902, 0.14500372111797333, -0.14730134606361389, 0.23330648243427277, 0.19407367706298828, 0.01561804860830307, -0.20008346438407898, -0.17371706664562225, -0.060978483408689499, 0.12259094417095184, -0.17657552659511566, 0.0034761396236717701, -0.16882430016994476, -0.10471078753471375, 0.019182877615094185, -0.065423965454101562, -0.0057402472011744976, -0.0136726014316082, -0.047245476394891739, 0.21495175361633301, 0.052813991904258728, -0.0091447466984391212, -0.34211280941963196, -0.25211441516876221, -0.3382391631603241, 0.076197944581508636, -0.032609902322292328, 0.059067949652671814, -0.40183329582214355, -0.18040329217910767, 0.08593171089887619, 0.22476263344287872, -0.026608595624566078, -0.086657993495464325, -0.16038148105144501, 0.10489039868116379, 0.14249779284000397, 0.0057487357407808304, -0.35006392002105713, -0.21673130989074707, -0.44845259189605713, 0.050747387111186981, -0.075584426522254944, 0.26247262954711914, -0.28145644068717957, -0.11170393228530884, -0.029483981430530548, -0.022231372073292732, -0.064719952642917633, 0.24512605369091034, 0.29995065927505493, 0.16214855015277863, 0.029044186696410179, 0.010267892852425575, -0.24135257303714752, -0.30737224221229553, -0.46515676379203796, 0.033838234841823578, 0.1214657723903656, 0.20384173095226288, -0.2257520854473114, -0.29927921295166016, 0.089206703007221222, 0.24495747685432434, -0.11160389333963394, -0.0043928306549787521, 0.046725135296583176, 0.15046891570091248, 0.040020573884248734, -0.052762288600206375, -0.31912508606910706, -0.14618693292140961, -0.11886065453290939, 0.014216992072761059, -0.19630138576030731, 0.11520639061927795, -0.34799554944038391, -0.36465805768966675, 0.10955014079809189, 0.066345006227493286, -0.028718983754515648, 0.09726841002702713, -0.21323949098587036, 0.21121823787689209, 0.0094188256189227104, 0.27844598889350891, -0.16021782159805298, -0.19012515246868134, -0.17218737304210663, 0.088554210960865021, -0.11904238164424896, 0.16137167811393738, -0.17592500150203705, -0.27992120385169983, -0.013184085488319397, 0.23559890687465668, -0.067273415625095367, 0.12620007991790771, 0.02849552221596241, 0.17205207049846649, 0.17344090342521667, 0.20171014964580536, -0.28148064017295837, -0.070073306560516357, 0.068531394004821777, -0.079693876206874847, -0.09563310444355011, 0.086221702396869659, -0.1799471527338028, -0.20958918333053589, 0.034448098391294479, 0.077817410230636597, -0.22467486560344696, 0.070574432611465454, 0.1496390700340271, 0.18512770533561707, 0.073906607925891876, 0.075779207050800323, -0.49145248532295227, -0.069294720888137817, -0.21589203178882599, 0.17016448080539703, -0.26843488216400146, -0.029069451615214348, -0.15634551644325256, -0.19214056432247162, 0.048917021602392197, 0.034351944923400879, -0.15317639708518982, -0.02785843051970005, 0.27795496582984924, 0.15803956985473633, 0.092777572572231293, 0.007051518652588129, -0.19537699222564697, -0.20237594842910767, -0.30344805121421814, 0.12507729232311249, -0.071132272481918335, 0.30122914910316467, -0.13546714186668396, -0.30191043019294739, -0.047505348920822144, 0.14164313673973083, 0.00026853845338337123, 0.22611619532108307, 0.091363608837127686, 0.37633126974105835, 0.10060920566320419, 0.045425456017255783, -0.22555314004421234, -0.29876908659934998, -0.15426994860172272, 0.15339149534702301, 0.12799184024333954, 0.24149212241172791, 0.061948060989379883, -0.067545942962169647, 0.037702910602092743, 0.23077388107776642, -0.024321382865309715, 0.095400780439376831, 0.16592855751514435, 0.26629111170768738, 0.075340889394283295, 0.0082209315150976181, -0.38433235883712769, -0.17095702886581421, -0.035202082246541977, 0.096955202519893646, -0.26024994254112244, 0.017534054815769196, 0.019323395565152168, -0.13619314134120941, 0.037518899887800217, 0.048057906329631805, -0.051876652985811234, 0.047476444393396378, 0.016935940831899643, 0.18011677265167236, 0.1012151837348938, 0.1610582023859024, -0.24507445096969604, -0.081012621521949768, -0.037334103137254715, -0.014778510667383671, -0.050827715545892715, 0.14974044263362885, -0.25811979174613953, -0.35731419920921326, 0.043355472385883331, 0.1755354255437851, -0.041435886174440384, 0.18858106434345245, -0.081571392714977264, 0.18101306259632111, 0.22805987298488617, 0.050479095429182053, -0.23419815301895142, -0.22234386205673218, -0.094771318137645721, 0.040497574955224991, 0.091212868690490723, 0.026274660602211952, 0.041483715176582336, -0.22944998741149902, 0.06917225569486618, 0.41326701641082764, -0.065857760608196259, 0.17980264127254486, 0.12381156533956528, 0.1406143456697464, 0.33084824681282043, 0.0045293844304978848, -0.63036864995956421, -0.22289767861366272, -0.083954960107803345, 0.0046643391251564026, 0.099857069551944733, -0.0055299182422459126, -0.16940228641033173, -0.30803292989730835, -0.092742718756198883, -0.076716594398021698, -0.075049683451652527, 0.065245561301708221, 0.31704011559486389, 0.065144345164299011, 0.18023477494716644, -0.069505162537097931, -0.36034119129180908, -0.093194268643856049, -0.48042064905166626, 0.12234906107187271, 0.063419781625270844, 0.18184739351272583, -0.41801893711090088, -0.22586184740066528, -0.05146041139960289, 0.33307072520256042, -0.22773610055446625, -0.040354318916797638, -0.12541380524635315, 0.16275607049465179, 0.09634099155664444, -0.21686635911464691, -0.38846862316131592, -0.29425117373466492, -0.39870172739028931, 0.046226054430007935, -0.05770556628704071, 0.20513449609279633, -0.24787797033786774, -0.28777739405632019, -0.10786326974630356, 0.13040314614772797, 0.047308683395385742, 0.025639034807682037, 0.038675330579280853, 0.16332757472991943, 0.046672645956277847, -0.082571431994438171, -0.29118850827217102, -0.13750652968883514, 0.029294619336724281, 0.1396220475435257, -0.081558734178543091, 0.1683836430311203, -0.094881646335124969, -0.26493188738822937, 0.013453828170895576, 0.28637731075286865, -0.064175523817539215, 0.06382548063993454, 0.011896043084561825, 0.10921641439199448, 0.083405211567878723, -0.014198527671396732, -0.2939208447933197, -0.18563786149024963, -0.048598919063806534, 0.12211690843105316, 0.038996793329715729, 0.10671012103557587, -0.1088116243481636, -0.38678637146949768, 0.051025725901126862, 0.096584349870681763, 0.027836933732032776, 0.079565830528736115, 0.2501811683177948, 0.052191421389579773, 0.10500660538673401, 0.15662243962287903, -0.47078493237495422, -0.22617216408252716, 0.0089259687811136246, 0.013249463401734829, -0.054124936461448669, 0.12949448823928833, -0.018679188564419746, -0.19045354425907135, 0.12930743396282196, 0.37571591138839722, 0.14338767528533936, 0.1447615921497345, -0.11614573746919632, 0.12210442125797272, 0.1775551438331604, -0.10613037645816803, -0.46988487243652344, -0.21078510582447052, 0.077604278922080994, -0.0046888762153685093, -0.2054135799407959, 0.013798762112855911, -0.27196750044822693, -0.14398029446601868, 0.038605879992246628, 0.17293430864810944, -0.023220259696245193, 0.029590880498290062, 0.24050842225551605, 0.090717017650604248, 0.060644209384918213, 0.096769750118255615, -0.38757440447807312, -0.081669539213180542, -0.21300491690635681, 0.086043998599052429, -0.021784728392958641, 0.27016016840934753, -0.055800676345825195, -0.27895170450210571, 0.048167385160923004, 0.0068943151272833347, -0.020766424015164375, 0.11539951711893082, 0.38764554262161255, 0.27375674247741699, 0.14922636747360229, -0.041430938988924026, -0.31443968415260315, -0.19897688925266266, -0.4238758385181427, 0.079516381025314331, 0.15548163652420044, 0.11777321994304657, -0.27666878700256348, -0.10095863789319992, 0.016599034890532494, 0.099247470498085022, -0.044645797461271286, 0.13297751545906067, 0.22571416199207306, 0.16471339762210846, -0.01224315632134676, 0.1832871288061142, -0.38815194368362427, 0.10452701896429062, -0.1663697212934494, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 3,400 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,13 } };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,3 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,7,1 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,4 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,5 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,2 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,6 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,10 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,11,9 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 5152, (TfLiteIntArray*)&tensor_dimension0, 5148, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1248, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1536, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 12, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 8, },
  { kTfLiteMmapRo, kTfLiteFloat32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 4800, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 5148, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 5152, (TfLiteIntArray*)&tensor_dimension13, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 3168, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension15, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension17, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 3200, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension19, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 1600, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension21, 12, },
  { kTfLiteArenaRw, kTfLiteFloat32, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 12, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_12_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_12_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteStatus tflite_learn_12_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
